// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  googleId String @unique
  username String @unique
  email String @unique
  image String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDemo Boolean @default(false)

  ownedSubreddits Subreddit[]
  subreddits Subscription[]

  posts Post[]
  savedPosts SavedPost[]
  comments Comment[]
  votes Vote[]
  commentsVotes CommentVote[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  sentNotifications  Notification[] @relation("NotificationSender")
  receivedNotifications  Notification[] @relation("NotificationReceiver")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Subreddit {
  id String @id @default(uuid())
  name String @unique
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  onwer User @relation(fields: [onwerId], references: [id])
  onwerId String
  subscribers Subscription[]

  posts Post[]

  @@index([name])
}

model Subscription{
  user User @relation(fields: [userId], references: [id])
  userId String
  subreddit Subreddit @relation(fields: [subredditId], references: [id]) 
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id String @id @default(uuid())
  title String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subreddit Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  author User @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes Vote[]

  savedBy SavedPost[]
}

model SavedPost {
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}

model Comment {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
  authorId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("ReplyTo")

  votes CommentVote[]
}

enum VoteType {
  upvote
  downvote
}

model Vote {
  type VoteType
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model CommentVote {
  type VoteType
  user User @relation(fields: [userId], references: [id])
  userId String
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

enum NotificationTypeNames {
  post_upvote
  post_comment
  comment_upvote
  comment_reply
  account_follow 
}

model NotificationType {
  id String @id @default(uuid())
  name NotificationTypeNames @unique
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nofications Notification[]
}

model Notification{
  id String @id @default(uuid())
  sender User @relation("NotificationSender",fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  receiver User @relation("NotificationReceiver",fields: [receiverId], references: [id] , onDelete: Cascade)
  receiverId String
  type NotificationType @relation(fields: [typeId], references: [id] , onDelete: Cascade)
  typeId String
  url String
  entityId String
  seen Boolean @default(false)
  createdAt DateTime @default(now())
}
